@model List<UniversityPayroll.Models.SalaryStructure>
@{
    ViewData["Title"] = "Salary Structures";
}

<div id="react-root"></div>

<script>
    const structuresData = @Json.Serialize(Model);
    const e = React.createElement;

    const defaultStructure = () => ({
        designation: '',
        allowances: { daPercent: 0, hraPercent: 0 },
        annualIncrementPercent: 0,
        pf: { employeePercent: 0, employerPercent: 0, edliPercent: 0 }
    });

    const SalaryStructureApp = () => {
        const [structures, setStructures] = React.useState(structuresData);
        const [showForm, setShowForm] = React.useState(false);
        const [editingId, setEditingId] = React.useState(null);
        const [formData, setFormData] = React.useState(defaultStructure());

        const resetForm = () => {
            setFormData(defaultStructure());
            setEditingId(null);
        };

        const handleSubmit = async (ev) => {
            ev.preventDefault();
            const url = editingId ? '/SalaryStructure/EditAjax' : '/SalaryStructure/CreateAjax';
            await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ ...formData, id: editingId })
            });
            window.location.reload();
        };

        const updateField = (field, value) => {
            setFormData({ ...formData, [field]: value });
        };

        const updateNested = (group, field, value) => {
            setFormData({
                ...formData,
                [group]: { ...formData[group], [field]: Number(value) || 0 }
            });
        };

        const showEditForm = async (id) => {
            const resp = await fetch(`/SalaryStructure/GetById?id=${id}`);
            const data = await resp.json();
            setFormData(data);
            setEditingId(id);
            setShowForm(true);
        };

        const deleteStructure = async (id) => {
            if (!confirm('Delete this structure?')) return;
            await fetch('/SalaryStructure/DeleteAjax', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(id)
            });
            setStructures(structures.filter(s => s.id !== id));
        };

        const renderForm = () => e('div', { className: 'container mt-3' },
            e('h2', null, editingId ? 'Edit Structure' : 'New Structure'),
            e('form', { onSubmit: handleSubmit },
                e('input', {
                    type: 'text', className: 'form-control mb-2', placeholder: 'Designation',
                    value: formData.designation, onChange: e => updateField('designation', e.target.value), required: true
                }),
                e('input', {
                    type: 'number', className: 'form-control mb-2', placeholder: 'DA %',
                    value: formData.allowances.daPercent || '', onChange: e => updateNested('allowances', 'daPercent', e.target.value), required: true
                }),
                e('input', {
                    type: 'number', className: 'form-control mb-2', placeholder: 'HRA %',
                    value: formData.allowances.hraPercent || '', onChange: e => updateNested('allowances', 'hraPercent', e.target.value), required: true
                }),
                e('input', {
                    type: 'number', className: 'form-control mb-2', placeholder: 'Increment %',
                    value: formData.annualIncrementPercent || '', onChange: e => updateField('annualIncrementPercent', Number(e.target.value)), required: true
                }),
                e('input', {
                    type: 'number', className: 'form-control mb-2', placeholder: 'PF Emp %',
                    value: formData.pf.employeePercent || '', onChange: e => updateNested('pf', 'employeePercent', e.target.value), required: true
                }),
                e('input', {
                    type: 'number', className: 'form-control mb-2', placeholder: 'PF Empr %',
                    value: formData.pf.employerPercent || '', onChange: e => updateNested('pf', 'employerPercent', e.target.value), required: true
                }),
                e('input', {
                    type: 'number', className: 'form-control mb-3', placeholder: 'EDLI %',
                    value: formData.pf.edliPercent || '', onChange: e => updateNested('pf', 'edliPercent', e.target.value), required: true
                }),
                e('button', { type: 'submit', className: 'btn btn-primary me-2' }, editingId ? 'Update' : 'Save'),
                e('button', { type: 'button', className: 'btn btn-secondary', onClick: () => setShowForm(false) }, 'Cancel')
            )
        );

        const renderTable = () => e('div', { className: 'container mt-3' },
            e('h2', null, 'Salary Structures'),
            e('button', { className: 'btn btn-primary mb-3', onClick: () => { resetForm(); setShowForm(true); } }, 'New Structure'),
            e('table', { className: 'table table-striped' },
                e('thead', null,
                    e('tr', null,
                        e('th', null, 'Designation'),
                        e('th', null, 'DA %'),
                        e('th', null, 'HRA %'),
                        e('th', null, 'Increment %'),
                        e('th', null, 'PF Emp %'),
                        e('th', null, 'PF Empr %'),
                        e('th', null, 'EDLI %'),
                        e('th', null, 'Actions')
                    )
                ),
                e('tbody', null,
                    structures.map(s => e('tr', { key: s.id },
                        e('td', null, s.designation),
                        e('td', null, s.allowances.daPercent),
                        e('td', null, s.allowances.hraPercent),
                        e('td', null, s.annualIncrementPercent),
                        e('td', null, s.pf.employeePercent),
                        e('td', null, s.pf.employerPercent),
                        e('td', null, s.pf.edliPercent),
                        e('td', null,
                            e('button', { className: 'btn btn-sm btn-secondary me-1', onClick: () => showEditForm(s.id) }, 'Edit'),
                            e('button', { className: 'btn btn-sm btn-danger', onClick: () => deleteStructure(s.id) }, 'Delete')
                        )
                    ))
                )
            )
        );

        return showForm ? renderForm() : renderTable();
    };

    ReactDOM.createRoot(document.getElementById('react-root')).render(e(SalaryStructureApp));
</script>
