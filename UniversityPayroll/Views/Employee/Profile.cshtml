@model UniversityPayroll.ViewModels.EmployeeProfileViewModel
@{
    ViewData["Title"] = "Profile";
    var unpaidLeaves = ViewData["UnpaidLeaves"] as List<UniversityPayroll.Models.LeaveApplication> ?? new List<UniversityPayroll.Models.LeaveApplication>();
}
<h2>My Profile</h2>
@if (Model.Employee == null)
{
    <div class="alert alert-danger">Profile not found.</div>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <h4>Details</h4>
            <p><strong>Code:</strong> @Model.Employee.EmployeeCode</p>
            <p><strong>Name:</strong> @Model.Employee.Name</p>
            <p><strong>Designation:</strong> @Model.Employee.Designation</p>
            <p><strong>Base Salary:</strong> @Model.Employee.BaseSalary</p>
            <h5>Salary Structure</h5>
            @if (Model.SalaryStructure != null)
            {
                <ul>
                    <li>DA %: @Model.SalaryStructure.Allowances?.DaPercent</li>
                    <li>HRA %: @Model.SalaryStructure.Allowances?.HraPercent</li>
                    @if (Model.SalaryStructure.Allowances?.OtherAllowances != null)
                    {
                        @foreach (var o in Model.SalaryStructure.Allowances.OtherAllowances)
                        {
                            <li>@o.Name: @o.Percent %</li>
                        }
                    }
                </ul>
            }
            else
            {
                <span class="text-danger">No salary structure info.</span>
            }
            <p>
                <strong>Tax Slab:</strong>
                @(Model.TaxSlab != null ? $"{Model.TaxSlab.FinancialYear} ({Model.TaxSlab.CessPercent}% cess)" : "N/A")
            </p>
        </div>
        <div class="col-md-6">
            <h4>Leave Balances (@(Model.LeaveBalance?.Year ?? DateTime.UtcNow.Year))</h4>
            @if (Model.LeaveBalance != null && Model.LeaveBalance.Entitlements != null)
            {
                <table class="table table-bordered w-auto">
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Entitled</th>
                            <th>Used</th>
                            <th>Left</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var kv in Model.LeaveBalance.Entitlements)
                        {
                            var type = kv.Key;
                            var entitled = kv.Value;
                            var used = Model.LeaveBalance.Used != null && Model.LeaveBalance.Used.ContainsKey(type) ? Model.LeaveBalance.Used[type] : 0;
                            var left = Model.LeaveBalance.Balance != null && Model.LeaveBalance.Balance.ContainsKey(type) ? Model.LeaveBalance.Balance[type] : (entitled - used);
                            <tr>
                                <td>@type</td>
                                <td>@entitled</td>
                                <td>@used</td>
                                <td>@left</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-warning">Leave balance info not found.</div>
            }

            <h4>Unpaid Leaves (Current Year)</h4>
            @if (unpaidLeaves.Any())
            {
                <table class="table table-sm table-bordered">
                    <thead>
                        <tr>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Days</th>
                            <th>Half Day</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var leave in unpaidLeaves.OrderByDescending(l => l.StartDate))
                        {
                            <tr>
                                <td>@leave.StartDate.ToString("dd/MM/yyyy")</td>
                                <td>@leave.EndDate.ToString("dd/MM/yyyy")</td>
                                <td>@leave.TotalDays</td>
                                <td>
                                    @if (leave.IsHalfDay)
                                    {
                                        <span class="badge bg-info text-dark">Yes</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge @(leave.Status == "Approved" ? "bg-success" : leave.Status == "Rejected" ? "bg-danger" : "bg-warning text-dark")">
                                        @leave.Status
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted">No unpaid leaves found.</p>
            }

            <h4>Latest Net Salary</h4>
            @if (Model.SalarySlips != null && Model.SalarySlips.Any())
            {
                var latestSlip = Model.SalarySlips.OrderByDescending(s => s.Year).ThenByDescending(s => s.Month).First();
                <p><strong>Net Pay:</strong> @latestSlip.NetPay.ToString("C")</p>
                @if (latestSlip.UnpaidLeaveDeduction > 0)
                {
                    <p><strong>Unpaid Leave Deduction:</strong> <span class="text-danger">@latestSlip.UnpaidLeaveDeduction.ToString("C")</span></p>
                }
                else
                {
                    <p><strong>Unpaid Leave Deduction:</strong> @latestSlip.UnpaidLeaveDeduction.ToString("C")</p>
                }
            }
            else
            {
                <p>No payslips yet.</p>
            }

            <h4>Payslips</h4>
            @{
                var years = Model.SalarySlips?.Select(s => s.Year).Distinct().OrderByDescending(y => y).ToList() ?? new List<int>();
            }
            <form method="get" id="payslipForm">
                <div class="row mb-2">
                    <div class="col">
                        <select id="yearSelect" name="year" class="form-control" required>
                            <option value="">Year</option>
                            @foreach (var y in years)
                            {
                                <option value="@y">@y</option>
                            }
                        </select>
                    </div>
                    <div class="col">
                        <select id="monthSelect" name="month" class="form-control" required>
                            <option value="">Month</option>
                            @for (int m = 1; m <= 12; m++)
                            {
                                <option value="@m">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                            }
                        </select>
                    </div>
                    <div class="col">
                        <button type="button" class="btn btn-primary" id="downloadBtn">Download Payslip</button>
                    </div>
                </div>
            </form>
            <div id="payslipMsg"></div>
            <script>
                document.getElementById('downloadBtn').onclick = function () {
                    var year = parseInt(document.getElementById('yearSelect').value);
                    var month = parseInt(document.getElementById('monthSelect').value);
                    if (!year || !month) {
                        document.getElementById('payslipMsg').innerText = 'Select year and month.';
                        return;
                    }
                    var slipList = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.SalarySlips));
                    var found = slipList.find(s => s.Year === year && s.Month === month);
                    if (found && found.PdfUrl) {
                        window.open('/Admin/DownloadSlip?file=' + encodeURIComponent(found.PdfUrl.split('/').pop()), '_blank');
                        document.getElementById('payslipMsg').innerText = '';
                    } else {
                        document.getElementById('payslipMsg').innerText = 'Payslip not found for selected period.';
                    }
                };
            </script>
        </div>
    </div>
}