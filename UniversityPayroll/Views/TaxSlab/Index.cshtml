@model List<UniversityPayroll.Models.TaxSlab>
@{ ViewData["Title"] = "Tax Slabs"; }

<div id="react-root"></div>

<script>
    const taxSlabsData = @Json.Serialize(Model);
    const e = React.createElement;

    const emptySlabs = () => Array(6).fill().map(() => ({ from: 0, to: null, rate: 0 }));
    const defaultFormData = () => ({ financialYear: '', cessPercent: 0, slabs: emptySlabs() });

    const TaxSlabApp = () => {
        const [taxSlabs, setTaxSlabs]       = React.useState(taxSlabsData);
        const [showForm, setShowForm]       = React.useState(false);
        const [editingId, setEditingId]     = React.useState(null);
        const [formData, setFormData]       = React.useState(defaultFormData());

        const resetForm = () => { setFormData(defaultFormData()); setEditingId(null); };

        const handleSubmit = async ev => {
            ev.preventDefault();
            const url = editingId ? '/TaxSlab/EditAjax' : '/TaxSlab/CreateAjax';
            await fetch(url, { method: 'POST', headers: { 'Content-Type':'application/json' },
                body: JSON.stringify({ ...formData, slabs: formData.slabs.filter(s => s.rate>0), id: editingId })
            });
            window.location.reload();
        };

        const updateField = (field, value) => setFormData({ ...formData, [field]: value });

        const updateSlab = (i, field, val) => {
            const slabs = formData.slabs.slice();
            slabs[i] = { ...slabs[i], [field]: val===''?null:Number(val)||0 };
            setFormData({ ...formData, slabs });
        };

        const showNewForm = () => { resetForm(); setShowForm(true); };
        
        const showEditForm = async id => {
            const res  = await fetch(`/TaxSlab/GetById?id=${id}`);
            const data = await res.json();
            setFormData({ financialYear: data.financialYear, cessPercent: data.cessPercent,
                slabs: data.slabs.concat(emptySlabs().slice(data.slabs.length)) });
            setEditingId(id); setShowForm(true);
        };
        
        const deleteTaxSlab = async id => {
            if (!confirm('Delete?')) return;
            await fetch('/TaxSlab/DeleteAjax',{ method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(id) });
            setTaxSlabs(taxSlabs.filter(t=>t.id!==id));
        };

        const renderForm = () => e('div', { className:'container mt-3' },
            e('h2', null, editingId ? 'Edit Tax Slab' : 'New Tax Slab'),
            e('form', { onSubmit: handleSubmit },
                e('input', {
                    type: 'text',
                    className: 'form-control mb-2',
                    placeholder: 'Financial Year',
                    value: formData.financialYear,
                    onChange: (e) => updateField('financialYear', e.target.value),
                    required: true
                }),
                e('input', {
                    type: 'number',
                    className: 'form-control mb-3',
                    placeholder: 'Cess %',
                    value: formData.cessPercent,
                    onChange: (e) => updateField('cessPercent', Number(e.target.value)),
                    required: true
                }),
                e('table', { className: 'table table-bordered' },
                    e('thead', null,
                        e('tr', null,
                            e('th', null, 'From'),
                            e('th', null, 'To'),
                            e('th', null, 'Rate')
                        )
                    ),
                    e('tbody', null,
                        formData.slabs.map((slab, i) =>
                            e('tr', { key: i },
                                e('td', null,
                                    e('input', {
                                        type: 'number',
                                        className: 'form-control',
                                        value: slab.from || '',
                                        onChange: (e) => updateSlab(i, 'from', e.target.value)
                                    })
                                ),
                                e('td', null,
                                    e('input', {
                                        type: 'number',
                                        className: 'form-control',
                                        value: slab.to || '',
                                        onChange: (e) => updateSlab(i, 'to', e.target.value)
                                    })
                                ),
                                e('td', null,
                                    e('input', {
                                        type: 'number',
                                        className: 'form-control',
                                        value: slab.rate || '',
                                        onChange: (e) => updateSlab(i, 'rate', e.target.value)
                                    })
                                )
                            )
                        )
                    )
                ),
                e('button', { type: 'submit', className: 'btn btn-primary me-2' }, editingId ? 'Update' : 'Save'),
                e('button', { type: 'button', className: 'btn btn-secondary', onClick: () => setShowForm(false) }, 'Cancel')
            )
        );

        const renderTable = () => e('div', { className:'container mt-3' },
            e('h2', null, 'Tax Slabs'),
            e('button', { className: 'btn btn-primary mb-3', onClick: showNewForm }, 'New Tax Slab'),
            e('table', { className: 'table table-striped' },
                e('thead', null,
                    e('tr', null,
                        e('th', null, 'FY'),
                        e('th', null, 'Cess'),
                        e('th', null, 'Slabs'),
                        e('th', null, 'Actions')
                    )
                ),
                e('tbody', null,
                    taxSlabs.map(t =>
                        e('tr', { key: t.id },
                            e('td', null, t.financialYear),
                            e('td', null, t.cessPercent),
                            e('td', null, t.slabs.map(s => `${s.from}-${s.to || '∞'} @@ ${s.rate}%`).join('; ')),
                            e('td', null,
                                e('button', {
                                    className: 'btn btn-sm btn-secondary me-1',
                                    onClick: () => showEditForm(t.id)
                                }, 'Edit'),
                                e('button', {
                                    className: 'btn btn-sm btn-danger',
                                    onClick: () => deleteTaxSlab(t.id)
                                }, 'Delete')
                            )
                        )
                    )
                )
            )
        );
        return showForm ? renderForm() : renderTable();
    };

    ReactDOM.createRoot(document.getElementById('react-root')).render(e(TaxSlabApp));
</script>
