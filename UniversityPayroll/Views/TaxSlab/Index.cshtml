@model List<UniversityPayroll.Models.TaxSlab>
@{ ViewData["Title"] = "Tax Slabs"; }

<div id="react-root"></div>

<script>
    const taxSlabsData = @Json.Serialize(Model);
    const e = React.createElement;

    const TaxSlabApp = () => {
        const [taxSlabs, setTaxSlabs] = React.useState(taxSlabsData);
        const [currentView, setCurrentView] = React.useState('list');
        const [editingTaxSlab, setEditingTaxSlab] = React.useState(null);
        const [formData, setFormData] = React.useState({
            financialYear: '',
            cessPercent: 0,
            slabs: Array(6).fill({ from: 0, to: null, rate: 0 })
        });

        const handleCreate = () => {
            setCurrentView('form');
            setFormData({
                financialYear: '',
                cessPercent: 0,
                slabs: Array(6).fill({ from: 0, to: null, rate: 0 })
            });
            setEditingTaxSlab(null);
        };

        const handleEdit = async (id) => {
            const response = await fetch(`/TaxSlab/GetById?id=${id}`);
            const data = await response.json();
            setEditingTaxSlab(data);
            setFormData({
                ...data,
                slabs: [...data.slabs, ...Array(Math.max(0, 6 - data.slabs.length)).fill({ from: 0, to: null, rate: 0 })]
            });
            setCurrentView('form');
        };

        const handleDelete = async (id) => {
            if (!confirm('Delete this tax slab?')) return;
            
            const response = await fetch('/TaxSlab/DeleteAjax', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(id)
            });
            
            if (response.ok) {
                setTaxSlabs(taxSlabs.filter(t => t.id !== id));
            }
        };

        const handleSubmit = async (event) => {
            event.preventDefault();
            
            const submitData = {
                ...formData,
                slabs: formData.slabs.filter(s => s.rate > 0),
                id: editingTaxSlab?.id
            };

            const response = await fetch(editingTaxSlab ? '/TaxSlab/EditAjax' : '/TaxSlab/CreateAjax', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(submitData)
            });

            if (response.ok) {
                window.location.reload();
            }
        };

        const updateSlabField = (index, field, value) => {
            const newSlabs = [...formData.slabs];
            newSlabs[index] = { ...newSlabs[index], [field]: value === '' ? (field === 'to' ? null : 0) : parseFloat(value) || 0 };
            setFormData(prev => ({ ...prev, slabs: newSlabs }));
        };

        if (currentView === 'form') {
            return e('div', null,
                e('h2', null, editingTaxSlab ? 'Edit Tax Slab' : 'New Tax Slab'),
                e('form', { onSubmit: handleSubmit },
                    e('div', { className: 'row' },
                        e('div', { className: 'col-md-6 mb-3' },
                            e('label', { className: 'form-label' }, 'Financial Year'),
                            e('input', {
                                type: 'text',
                                className: 'form-control',
                                value: formData.financialYear,
                                onChange: (ev) => setFormData(prev => ({ ...prev, financialYear: ev.target.value })),
                                required: true
                            })
                        ),
                        e('div', { className: 'col-md-6 mb-3' },
                            e('label', { className: 'form-label' }, 'Cess %'),
                            e('input', {
                                type: 'number',
                                step: '0.01',
                                className: 'form-control',
                                value: formData.cessPercent,
                                onChange: (ev) => setFormData(prev => ({ ...prev, cessPercent: parseFloat(ev.target.value) || 0 })),
                                required: true
                            })
                        )
                    ),
                    e('fieldset', { className: 'border p-3 mb-3' },
                        e('legend', { className: 'float-none w-auto' }, 'Tax Slabs'),
                        e('div', { className: 'table-responsive' },
                            e('table', { className: 'table table-bordered' },
                                e('thead', { className: 'table-light' },
                                    e('tr', null,
                                        e('th', null, 'From (₹)'),
                                        e('th', null, 'To (₹) ', e('small', { className: 'text-muted' }, '(blank = ∞)')),
                                        e('th', null, 'Rate %')
                                    )
                                ),
                                e('tbody', null,
                                    formData.slabs.map((slab, index) =>
                                        e('tr', { key: index },
                                            e('td', null,
                                                e('input', {
                                                    type: 'number',
                                                    step: '1',
                                                    min: '0',
                                                    className: 'form-control',
                                                    value: slab.from || '',
                                                    onChange: (ev) => updateSlabField(index, 'from', ev.target.value)
                                                })
                                            ),
                                            e('td', null,
                                                e('input', {
                                                    type: 'number',
                                                    step: '1',
                                                    min: '0',
                                                    className: 'form-control',
                                                    value: slab.to || '',
                                                    onChange: (ev) => updateSlabField(index, 'to', ev.target.value)
                                                })
                                            ),
                                            e('td', null,
                                                e('input', {
                                                    type: 'number',
                                                    step: '0.01',
                                                    min: '0',
                                                    max: '100',
                                                    className: 'form-control',
                                                    value: slab.rate || '',
                                                    onChange: (ev) => updateSlabField(index, 'rate', ev.target.value)
                                                })
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    e('button', { type: 'submit', className: 'btn btn-primary' }, editingTaxSlab ? 'Update' : 'Save'),
                    e('button', { 
                        type: 'button', 
                        className: 'btn btn-secondary ms-2',
                        onClick: () => setCurrentView('list')
                    }, 'Cancel')
                )
            );
        }

        return e('div', null,
            e('h2', null, 'Tax Slabs'),
            e('p', null, 
                e('button', { 
                    className: 'btn btn-primary',
                    onClick: handleCreate
                }, 'New Tax Slab')
            ),
            e('table', { className: 'table table-striped' },
                e('thead', null,
                    e('tr', null, 
                        e('th', null, 'FY'),
                        e('th', null, 'Cess %'),
                        e('th', null, 'Slabs'),
                        e('th', null, 'Actions')
                    )
                ),
                e('tbody', null,
                    taxSlabs.map(t => 
                        e('tr', { key: t.id },
                            e('td', null, t.financialYear),
                            e('td', null, t.cessPercent),
                            e('td', null, t.slabs.map(s => `${s.from}-${s.to ? s.to : '∞'} @@ ${s.rate}%`).join('; ')),
                            e('td', null,
                                e('button', { 
                                    className: 'btn btn-sm btn-secondary me-1',
                                    onClick: () => handleEdit(t.id)
                                }, 'Edit'),
                                e('button', { 
                                    className: 'btn btn-sm btn-danger',
                                    onClick: () => handleDelete(t.id)
                                }, 'Delete')
                            )
                        )
                    )
                )
            )
        );
    };

    ReactDOM.createRoot(document.getElementById('react-root')).render(e(TaxSlabApp));
</script>
